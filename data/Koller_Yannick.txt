Student ID:  [10150222]
Family Name: [Koller]
First Name:  [Yannick]


Complete this exam by placing an 'X' in the box
beside each correct answer, like so:

   [ ] This is not the correct answer
   [ ] This is not the correct answer either
   [ ] This is an incorrect answer
   [X] This is the correct answer
   [ ] This is an irrelevant answer

Scoring: Each question is worth 2 points.
        Final score will be: SUM / 10

Warning: Each question has only one correct answer.
        Answers to questions for which two or more boxes
        are marked with an 'X' will be scored as zero.

Total number of questions: 30

________________________________________________________________________________

1. The static type of a Perl variable is determined by:

   [X] Nothing: Perl variables don't have a static type; they have dynamic types
   [ ] The name of the variable
   [ ] Random chance
   [ ] The type of the first value placed in the variable
   [ ] The compile-time type declarator of the variable


________________________________________________________________________________

2. Perl's three main types of call context (or "amount context") are:

   [X] List, scalar, and void
   [ ] List, scalar, and null
   [ ] List, linear, and void
   [ ] Null, scalar, and void
   [ ] Blood, sweat, and tears


________________________________________________________________________________

3. The "default variable" (or "topic variable") is:

   [ ] $=
   [X] $_
   [ ] $$
   [ ] @_
   [ ] The last variable that was successfully assigned to


________________________________________________________________________________

4. You can access the command-line arguments of a Perl program via:

   [X] @ARGV
   [ ] $ARGV
   [ ] @ARGS
   [ ] @ARGC
   [ ] @_


________________________________________________________________________________

5. The main repository for Open Source Perl modules is:

   [ ] CSPAN
   [X] CPAN
   [ ] Perlhub
   [ ] Github
   [ ] www.perl.org


________________________________________________________________________________

6. The three standard sigils for variable declarations are:

   [ ] '$' for scalars, '@' for hashes, '%' for arrays
   [ ] '$' for scalars, '@' for consts, '%' for literals
   [ ] '$' for numeric, '@' for emails, '%' for percentages
   [ ] '$' for lookups, '@' for reuses, '%' for declarations
   [X] '$' for scalars, '@' for arrays, '%' for hashes


________________________________________________________________________________

7. The difference between a 'my' variable and an 'our' variable is:

   [ ] 'my' variables are compile-time;      'our' variables are run-time
   [ ] 'my' variables must be scalars;       'our' variables must be arrays or hashes
   [X] 'my' variables are lexically scoped;  'our' variables are package scoped
   [ ] 'my' variables are subroutine scoped; 'our' variables are block scoped
   [ ] 'my' variables are assignable;        'our' variables are constants


________________________________________________________________________________

8. A single-quoted string (such as: 'I will achieve 100% on this exam')...

   [X] ...does not interpolate variables or backslashed escape sequences
   [ ] ...interpolates both variables and backslashed escape sequences
   [ ] ...only interpolates variables, but not backslashed escape sequences
   [ ] ...converts its contents to ASCII, even if they are Unicode characters
   [ ] ...only interpolates backslashed escape sequences, but not variables


________________________________________________________________________________

9. The term qq{XXXXX} is...

   [ ] ...another way of writing the single-quoted string: 'XXXXX'
   [ ] ...a call to the 'qq' function, passing it a block of code
   [ ] ...another way of writing the array of strings: ['X', 'X', 'X', 'X', 'X']
   [X] ...another way of writing the double-quoted string: "XXXXX"
   [ ] ...another way of writing the list of strings:  ('X', 'X', 'X', 'X', 'X')


________________________________________________________________________________

10. Which of the following is NOT a single valid Perl number?

   [ ] 1.042e3
   [ ] 1_042
   [ ] 1042
   [X] 1'042
   [ ] 0b10000010010


________________________________________________________________________________

11. An array is...

   [ ] A multidimensional list
   [ ] A list with a predeclared fixed number of elements
   [X] A container for a list
   [ ] Exactly the same thing as a list
   [ ] Something that is always contained inside a list


________________________________________________________________________________

12. An 'if' statement requires curly brackets around the statements it controls...

   [X] ...in all circumstances
   [ ] ...never; the curly brackets are always optional in an 'if' statement
   [ ] ...only if the statements it controls include any variables declarations
   [ ] ...only if it controls two or more statements
   [ ] ...only if it controls exactly one statement


________________________________________________________________________________

13. To specify a second alternative test after an 'if', the correct keyword is:

   [ ] else if (with any amount of whitespace between the two words)
   [ ] elif
   [X] elsif
   [ ] elseif  (with no whitespace between the two words)
   [ ] otherwise


________________________________________________________________________________

14. "Short-circuiting" of a boolean expression means...

   [ ] ...Perl only evaluates each boolean expression once during the program
   [ ] ...Perl defers evaluating the expression until the result is tested
   [ ] ...Perl programs can cause CPUs to emit sparks if an expression is too complex
   [X] ...Perl evaluates as little as required to get a definite answer
   [ ] ...Perl will never execute an 'else' block


________________________________________________________________________________

15. The loop: for my $value (@data) {...}

   [X] ...executes its block once per element in @data, unless 'last' or 'redo' is called in the block
   [ ] ...executes its block endlessly, until a 'last' is executed in the loop
   [ ] ...executes its block once per element in @data in all circumstances
   [ ] ...never executes its block, because an array is not a list and cannot be iterated
   [ ] ...executes its block an unknown number of times, until @data is empty


________________________________________________________________________________

16. The 'while' loop in Perl...

   [ ] ...iterates until its condition becomes false anywhere within its block
   [ ] ...iterates until its condition is true at the start of an iteration
   [X] ...iterates until its condition is false at the start of an iteration
   [ ] ...iterates until its condition becomes true anywhere within its block
   [ ] ...doesn't exist; Perl does not have a 'while' loop


________________________________________________________________________________

17. The keywords for the Perl switch statement are:

   [ ] 'gather' and 'take'    and 'otherwise'
   [ ] 'given'  and 'when'    and 'default'
   [ ] 'case'   and 'of'      and 'or'
   [ ] 'whence' and 'whither' and 'thither'
   [X] 'switch' and 'case'    and 'else'


________________________________________________________________________________

18. Which five Perl values are the only values that evaluate false?

   [ ] 0, '0', 'false', 'False', 'FALSE'
   [ ] False, Nil, Null, None, Empty
   [X] 0, '0', '', (), undef
   [ ] 0, +0, -0, 0.0, -0.0
   [ ] 0, '0', '', (), []


________________________________________________________________________________

19. If the array @x contains four elements,
   how many elements will be in the list (1, @x, 2)?

   [ ] Eight: 1 * 4 * 2 = 8
   [X] Six:   the four array elements will be flattened into the list
   [ ] Two:   Perl ignores non-scalar variables in a list constructor
   [ ] Three: the array will become a single element within the list
   [ ] None:  it won't compile; arrays can't be used in list constructors


________________________________________________________________________________

20. A hash variable stores...

   [ ] Values of any scalar type, indexed by keys that are always strings
   [ ] Random values, indexed by sequential keys of any type
   [ ] Values that are always strings, indexed by keys of any type
   [X] Values of any scalar or list type, indexed by keys that are always strings
   [ ] Values that are unique, indexed by keys that may be repeated


________________________________________________________________________________

21. The expression 1 / 'Inf' produces the result:

   [ ] 1 (as a convenience, to avoid subsequent division by zero)
   [ ] A fatal exception (because 'Inf' is a string, not a number)
   [ ] A non-fatal warning (because 'Inf' is a string, not a number)
   [ ] An infinite evaluation loop; the program will run forever
   [X] 0 (because that's the correct mathematical outcome)


________________________________________________________________________________

22. A "reference" in Perl is most like:

   [ ] A link to the documentation for an existing value or variable
   [ ] An alias (i.e. another name) for an existing variable
   [X] A type-safe immutable pointer to an existing value or variable
   [ ] A deep copy of an existing variable or value
   [ ] A mutable pointer to a value or variable, without type-checking


________________________________________________________________________________

23. In Perl, you can take references to...

   [X] ...scalars, arrays, hashes, and subroutines
   [ ] ...only scalars (NOT to arrays, hashes, or subroutines)
   [ ] ...scalars and arrays, but NOT hashes or subroutines
   [ ] ...scalars, arrays, and hashes, but NOT subroutines
   [ ] ...arrays and hashes (i.e. containers), but NOT scalars or subroutines


________________________________________________________________________________

24. User-defined subroutines are declared with the keyword:

   [ ] 'def'
   [X] 'sub'
   [ ] 'subroutine'
   [ ] Nothing: subroutines are not explicitly declared in Perl
   [ ] 'fun'


________________________________________________________________________________

25. If a subroutine is declared WITHOUT a signature,
   when that subroutine is subsequently called,
   its arguments are passed to it in which variable?

   [ ] @ARGS
   [ ] @ARGV
   [X] @_
   [ ] $ARGV
   [ ] $_


________________________________________________________________________________

26. Which of the following parameter lists declares
   a subroutine that requires at least two arguments,
   but which will also accepts three or more arguments?

   [ ] sub two_or_more (@flags, @tags, @data)   {...}
   [ ] sub two_or_more ($flag, $tag, ...)       {...}
   [X] sub two_or_more ($flag, $tag, @data)     {...}
   [ ] sub two_or_more ($flag, @data)           {...}
   [ ] sub two_or_more ($flag, $data = $tag)    {...}


________________________________________________________________________________

27. If a user-defined subroutine does not contain a 'return' statement...

   [ ] ...it will return 'undef'
   [ ] ...it will throw an exception after executing its final statement
   [X] ...it will return the value the final statement in its definition
   [ ] ...it will return the value the last expression that it actually evaluates
   [ ] ...it will never return and will continue to execute forever


________________________________________________________________________________

28. The keyword to throw an exception in Perl is:

   [ ] 'arrrrgh'
   [X] 'die'
   [ ] 'raise'
   [ ] 'exit'
   [ ] 'throw'


________________________________________________________________________________

29. How are exceptions caught and then handled in Perl?

   [X] Caught in an 'eval' or 'try' block;  handled via the $@ variable or via a 'catch' block
   [ ] Exceptions in Perl can't be caught or handled after they're thrown
   [ ] Caught in a 'catch' block';          handled via the special $! variable
   [ ] Caught in a 'do' block;              handled via the builtin 'eval' function
   [ ] Caught in a 'catch' block;           handled via an 'handle' block


________________________________________________________________________________

30. What is the purpose of the 'use strict' pragma?

   [ ] It reports all errors using verbose (and harshly worded) error messages
   [ ] It prevents any construct that might also be valid C code
   [ ] It disallows package variables (all variables must be declared with 'my')
   [ ] It converts all warnings to fatal errors
   [X] It disallows undeclared variables, barewords, and symbolic references


________________________________________________________________________________